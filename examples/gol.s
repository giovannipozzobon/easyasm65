!CPU M65!TO "GOL", RUNNABLE; KERNAL ROUTINESBSOUT = $FFD2; ZERO PAGE POINTERSCELL_PTR = $FESTART    ; ÃLEAR THE SCREEN    LDA #147    JSR BSOUT    ; ÄRAW THE STARTER PATTERN: THE Ò-PENTOMINO    LDA #<($0800 + 80*10)    STA CELL_PTR    LDA #>($0800 + 80*10)    STA CELL_PTR+1    LDA #$51    LDY #40    STA (CELL_PTR),Y    INY    STA (CELL_PTR),Y    LDA #<($0800 + 80*11)    STA CELL_PTR    LDA #>($0800 + 80*11)    STA CELL_PTR+1    LDA #$51    LDY #39    STA (CELL_PTR),Y    INY    STA (CELL_PTR),Y    LDA #<($0800 + 80*12)    STA CELL_PTR    LDA #>($0800 + 80*12)    STA CELL_PTR+1    LDA #$51    LDY #40    STA (CELL_PTR),Y-   JSR ITERATE    BRA -ITERATE    ; ÒESET THE ROW BUFFER    JSR CLRBUF    ; TRAVERSE PLAYABLE REGION OF SCREEN    ; START AT $0851    ; FOR 23 ROWS: ADD ONE 78 TIMES; THEN ADD THREE    LDA #$51    STA CELL_PTR    LDA #$08    STA CELL_PTR+1    LDA #23    STA ROW_CT    LDA #78    STA COL_CTNEXT_COL    ; SET THE CURRENT CELL VALUE IN THE CURRENT ROW BUFFER    LDY #0    LDA (CELL_PTR),Y    CMP #$51    BEQ +    LDX #0    BRA +++   LDX #1++  SEC    LDA #79     ; 79-(COL_CT) = SCREEN COL NUMBER    SBC COL_CT    TAY    ; Y = COLUMN    TXA    ; A = 1 IF SET, 0 IF NOT    JSR SETCURBUF  ; USES Y AND A    ; COUNT BUFFER NEIGHBORS    JSR COUNTBUFNEIGHBORS  ; Y = COLUMN; SETS A TO COUNT    STA NEIGHBOR_CT    ; COUNT SCREEN NEIGHBORS (EAST, SOUTHWEST, SOUTH, SOUTHEAST)    LDY #1    LDA (CELL_PTR),Y    CMP #$51    BNE +    INC NEIGHBOR_CT+   LDY #79    LDA (CELL_PTR),Y    CMP #$51    BNE +    INC NEIGHBOR_CT+   INY    LDA (CELL_PTR),Y    CMP #$51    BNE +    INC NEIGHBOR_CT+   INY    LDA (CELL_PTR),Y    CMP #$51    BNE +    INC NEIGHBOR_CT+   LDA NEIGHBOR_CT    ; UPDATE CELL ACCORDING TO NEIGHBOR RULES    LDY #0    CMP #3    BEQ +    CMP #2    BNE ++    LDA (CELL_PTR),Y    CMP #$51    BNE +++   LDA #$51    BRA +++  LDA #$20+   STA (CELL_PTR),Y    ; ADVANCE CELL_PTR TO NEXT CELL    DEC COL_CT    BEQ LAST_COL    CLC    LDA #1    ADC CELL_PTR    STA CELL_PTR    LDA #0    ADC CELL_PTR+1    STA CELL_PTR+1    BRA NEXT_COLLAST_COL    ; SWAP ROW BUFFERS    JSR SWAPBUF    ; RESET COL_CT, ADVANCE TO NEXT ROW    LDA #78    STA COL_CT    DEC ROW_CT    BEQ LAST_ROW    CLC    LDA #3    ADC CELL_PTR    STA CELL_PTR    LDA #0    ADC CELL_PTR+1    STA CELL_PTR+1    JMP NEXT_COLLAST_ROW    RTSSWAPBUF    LDA BUFSEL    EOR #1    STA BUFSEL    RTSCLRBUF    ; CLEARS ENTIRE LINE BUFFER AND RESETS BUFFER SELECT    LDA #0    LDY #160-   STA LINEBUF-1,Y    DEY    BNE -    STA BUFSEL    RTSSETCURBUF    ; Y=COLUMN, A=VALUE    LDX BUFSEL    BNE +    ; BUFSEL=0 -> CURBUF = LINEBUF    STA LINEBUF,Y    BRA +++   ; BUFSEL=1 -> CURBUF = LINEBUF+80    STA LINEBUF+80,Y++  RTSCOUNTBUFNEIGHBORS    ; Y=COLUMN OF CURRENT CEL, >=1    ; SETS A TO COUNT OF NW,N,NE,W NEIGHBORS    LDA #0    CLC    LDX BUFSEL    BNE +    ; BUFSEL=0 -> CURBUF = LINEBUF, PREVBUF = LINEBUF+80    DEY    ADC LINEBUF+80,Y    ADC LINEBUF,Y    INY    ADC LINEBUF+80,Y    INY    ADC LINEBUF+80,Y    BRA +++   ; BUFSEL=1 -> CURBUF = LINEBUF+80, PREVBUF = LINEBUF    DEY    ADC LINEBUF,Y    ADC LINEBUF+80,Y    INY    ADC LINEBUF,Y    INY    ADC LINEBUF,Y++  RTSLINEBUF!FILL 160,0BUFSEL!FILL 1,0   ; IF 0, CUR=LINEBUF, PREV=LINEBUF+80            ; IF 1, CUR=LINEBUF+80, PREV=LINEBUFROW_CT!FILL 1,0COL_CT!FILL 1,0NEIGHBOR_CT!FILL 1,0